#include <stdio.h>
#include <stdlib.h>
#include "pila.h"

void cargarPila(Pila* A);
void pasarPila (Pila* A, Pila* B);
void pasarPilaOrdenada (Pila* A, Pila* B);
int buscarMenorPila(Pila* A);
void SelectionSort(Pila* A, Pila* Destino);
void NewElementSort(Pila* A, int Element);
int ReturnToppersAdd(Pila* A);

//promedio
int sumaPila(Pila* A);
int countPila(Pila* A);
int dividePila(int suma, int count);
int averagePila(Pila* A);

int main()
{
    Pila pila1;
    Pila pila2;
    Pila pila3;
    Pila pila4;
    Pila destinofr;
    inicpila(&pila1);
    inicpila(&pila2);
    inicpila(&pila3);
    inicpila(&pila4);
    inicpila(&destinofr);

    Pila pOrdenada;
    inicpila(&pOrdenada);

    apilar(&pOrdenada, 1);
    apilar(&pOrdenada, 2);
    apilar(&pOrdenada, 4);
    apilar(&pOrdenada, 5);
    apilar(&pOrdenada, 6);


    int ejercicio = 0;
    printf("asdasdasd");

    do
    {
        system("cls");
        printf("\n-----------");
        printf("\nLIST MENU");
        printf("\n-----------");
        printf("\n1-Cargar Pila");
        printf("\n2-Mover a otra pila");
        printf("\n3-Mover a pila de manera ordenada");
        printf("\n4-Buscar el menor en una pila");
        printf("\n5-Selection Sort!!!!!");
        printf("\n6-Ingresar un elemento sorteado");
        printf("\n7-");
        printf("\n8-Sumar los primeros 2 topes de tu pila!");
        printf("\n9-Calcular el promedio de los elementos de una pila");
        printf("\n10-");

        printf("\n0-QUIT");
        printf("\n\nINGRESA TU OPCION: ");
        scanf("%d",&ejercicio);

        switch(ejercicio)
        {
        case 1:
            cargarPila(&pila1);
            break;

        case 2:
            cargarPila(&pila3);
            pasarPila(&pila3, &pila4);
            break;

        case 3:
            cargarPila(&pila3);
            pasarPilaOrdenada(&pila3, &pila4);
            break;

        case 4:
            cargarPila(&pila1);
            int menor = buscarMenorPila(&pila1);
            printf("\nEl valor menor en la pila es: %i \n", menor);
            system("PAUSE");
            break;

        case 5:
            //ejercicio selection sort
            printf("\nVamos a cargar la pila! ");
            cargarPila(&pila1);
            SelectionSort(&pila1, &destinofr);
            printf("\n PILA DESTINO YIPIYIPIYIPIYIPIYIPI");
            mostrar(&destinofr);
            system("PAUSE");
            break;

         case 6:
             printf("\nIngrese un elemento, y lo insertaremos en una pila de forma ordenada: ");
             int NewElement = 0;    //<--- esto esta aca para que no crashee por declarar un statement despues del label case 6:
             scanf(" %d", &NewElement);
             NewElementSort(&pOrdenada, NewElement);
             mostrar(&pOrdenada);
             system("PAUSE");
             break;

         case 7:

         break;

         case 8:

             printf("\nVamos a cargar la pila! ");
             cargarPila(&pila1);
             int suma = ReturnToppersAdd(&pila1);
             printf("\nLa suma de los primeros 2 topes es %i \n", suma);
             system("PAUSE");
         break;

         case 9:
             printf("\Cargaremos su pila, y podra ver el promedio de los elementos en ella. ");
             cargarPila(&pila1);
             float average = averagePila(&pila1);
             printf("\nEl promedio es: %.2f\n", average);
             system("PAUSE");
         break;

        // case 10:

        // break;

        case 0:
            printf("\n\nTERMINATE THE PROGRAM\n");
            break;
        }
    }
    while(ejercicio!=0);


    return 0;
}

///---------- EJERCICIO 1 -----------------///
void cargarPila(Pila* A)
{
    char Continue = 'y';
    while(Continue == 'y')
    {
        leer(A);
        printf("Desea ingresar otro valor? (y/n)  ");
        scanf(" %c", &Continue);
        fflush(stdin);
    }
    mostrar(A);
    system("PAUSE");
}
///---------- EJERCICIO 2 -----------------///
void pasarPila (Pila* A, Pila* B)
{
    printf("Vamos a pasar todos los elementos de la Pila A, a la Pila B");
    printf("\nPILA 1 ---------\n");
    mostrar(A);
    while(!pilavacia(A))
    {
        apilar(B, desapilar(A));
    }

    printf("\nPILA 2 ---------\n");
    mostrar(B);
    system("PAUSE");
}
///---------- EJERCICIO 3 -----------------///
void pasarPilaOrdenada (Pila* A, Pila* B)
{
    printf("Vamos a pasar todos los elementos de forma ordenada a otra pila\n");

    Pila descartable;
    inicpila(&descartable);

    while(!pilavacia(A))
    {
        apilar(&descartable, desapilar(A));
    }

    while(!pilavacia(&descartable))
    {
        apilar(B, desapilar(&descartable));
    }
    printf("Pila b\n");
    mostrar(B);
    system("PAUSE");
}
///---------- EJERCICIO 4 -----------------///
int buscarMenorPila(Pila* A)
{
    Pila descartable;
    inicpila(&descartable);
    int menor = tope(A);

    while (!pilavacia(A))
    {
        if (tope(A) < menor)
        {
            menor = tope(A);
        }
        apilar(&descartable, desapilar(A));
    }

    while (!pilavacia(&descartable))
    {
        apilar(A, desapilar(&descartable));
        if (tope(A) == menor)
        {
            desapilar(A);
        }
    }
    return menor;
}
///---------- EJERCICIO 5 -----------------///
void SelectionSort(Pila* A, Pila* Destino)                                     ///<----- EXPLICACION PASO A PASO DE COMO FUNCIONA
{
    while(!pilavacia(A))
    {
        int menor = buscarMenorPila(A);
        apilar(Destino, menor);
    }
}



///---------- EJERCICIO 6 -----------------///
void NewElementSort(Pila* A, int Element)
{
    Pila Aux;
    inicpila(&Aux);
    int inserted = 0;     //<-- ya fue insertado?

    int menor = buscarMenorPila(A);  ///<--- just in case we could need it :3

    while(!pilavacia(A))
    {
        if (tope(A) < Element && !inserted)
        {
            apilar(A, Element);
            inserted = 1;
        }
        apilar(&Aux, desapilar(A));  ///<--- generar un nuevo tope basically
        }

    while(!pilavacia(&Aux))
    {
        apilar(A, desapilar(&Aux));
    }
}
///----------- EJERCICIO 8 -------------------///
int ReturnToppersAdd(Pila* A)
{
    int suma = 0;

    Pila aux;
    inicpila(&aux);

    for(int i=0; i<2; i++)
    {
        suma += tope(A);
        apilar(&aux, desapilar(A));
    }

    while (!pilavacia(&aux))
    {
        apilar(A, desapilar(&aux));
    }

    return suma;
}
///------------Ejercicio 9 -----------------///

int sumaPila(Pila* A){

    int suma = 0;
    Pila aux;
    inicpila(&aux);

    while(!pilavacia(A))
    {
        suma += tope(A);
        apilar(&aux, desapilar(A));
    }

    //fuck, go back
    while(!pilavacia(&aux))
    {
        apilar(A, desapilar(&aux));
    }

    return suma;
}

int countPila(Pila* A){

    int adding = 0;
    Pila aux;
    inicpila(&aux);

    while(!pilavacia(A))
    {
        adding++;
        apilar(&aux, desapilar(A));
    }
    //fuck, go back
    while(!pilavacia(&aux))
    {
        apilar(A, desapilar(&aux));
    }
    return adding;
}

int dividePila(int suma, int count)
{
    if (count == 0)
    {
        return 0.0; //no vamo a dividir por 0 wacho al pedo
    }

    return (float)suma / count;
}


int averagePila(Pila* A)
{
    int suma = sumaPila(A);
    int count = countPila(A);

    return dividePila(suma, count);
}
