#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILAS 100
#define COLUMNAS 12

int loadString(char matrix[FILAS][COLUMNAS]);
void lengthScore(char matrix[FILAS][COLUMNAS], char matrix2[FILAS][COLUMNAS], int validos);
void printStrings(char matrix[FILAS][COLUMNAS], int validos);
void lengthGuion(char string[FILAS], char string2[FILAS]);
void GuionMatrix(char matrix[FILAS][COLUMNAS], char matrix2[FILAS][COLUMNAS], int validos);

int main()
{
    char matrix[FILAS][COLUMNAS];
    char matrix2[FILAS][COLUMNAS];
    int validos = 0;

    int ejercicio = 0;

    printf("\n Seleccione un ejercicio.");
    scanf(" %c", &ejercicio);

    switch(ejercicio)
    {
        case 1:
            validos = loadString(matrix);

            printf("\nSTRING INGRESADO: ");
            printStrings(matrix, validos);
            lengthGuion(matrix, matrix2);
            printf("\nSTRING REEMPLAZADO: ");
            printStrings(matrix2, validos);
            break;

        default:
            printf("\nOpcion invalida.")
            break;
    }







    return 0;
}

int loadString(char matrix[FILAS][COLUMNAS])
{
    char keepgoing = 'y';
    int i = 0;

    for(i = 0; i < FILAS && keepgoing == 'y'; i++)
    {
        printf("\nIngrese una palabra: ");
        fflush(stdin);
        scanf("%s", &matrix[i]);

        printf("\nDesea continuar? Espacio restante: %i filas (y/n)      ", FILAS-i);
        fflush(stdin);
        scanf(" %c", &keepgoing);
    }
    return i;
}

void lengthGuion(char string[COLUMNAS], char string2[COLUMNAS])
{
    //en este caso, los validos son el numero de letras
    int validos = strlen(string);

    for(int i=0; i < validos; i++)
    {
        string2[i] = '-';
    }
}

void GuionMatrix(char matrix[FILAS][COLUMNAS], char matrix2[FILAS][COLUMNAS], int validos)
{
    for(int i=0; i < validos; i++)
    {
        lengthGuion(matrix[i], matrix2[i]);
    }
}

void printStrings(char matrix[FILAS][COLUMNAS], int validos)
{
    for(int i=0; i < validos; i++)
    {
        printf("\n %s", matrix[i]);
    }
}
