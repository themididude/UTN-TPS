#include <stdio.h>
#include <stdlib.h>
#include "pila.h"

#define DIM 15


typedef struct
{
    int legajo;
    char nombre[30];
    int edad;
    int anio;

} Alumno;


Alumno cargarAlumno();
void loadStudents(char nombre_archivo[]);
void insanePila(Pila* A, char nombre_archivo[]);

int main()
{

    ///-----------variables------------//
    int ejercicio = 0;
    char name[] = "file.dat";
    char namealumnos[] = "alumnos.dat";
    int ammount;
    int age = 0;
    int firstAge = 0;
    int secondAge = 0;
    int olderPeople = 0;
    int yearSearch = 0;
    int yearCount = 0;
    Alumno arrayAlumnos[DIM];
    int validosArray = 0;

    Pila pilovich;
    inicpila(&pilovich);

    ///--------------------------------//

    puts("\n----------------OPCIONES-----------------");
    puts("\n1.Ejercicio 1, 2, y 3: Cargar un archivo, mostrarlo, contar los elementos");
    puts("\n2.Ejercicio 4 y 5: Cargar y mostrar un registro de alumnos");
    puts("\n3.Ejercicio 6: Agregar un alumno extra al archivo de alumnos");
    puts("\n4.Ejercicio 7: Pasar el legajo de los mayores de edad a una pila");
    puts("\n5.Ejercicio 8: Contar alumnos mayores a una edad que usted elija");
    puts("\n6.Ejercicio 9: Mostrar alumnos entre un rango de edad");
    puts("\n7.Ejercicio 10: Mostrar el alumno mas grande");
    puts("\n8.Ejercicio 11: Contar alumnos que cursan un anio");
    puts("\n9.Ejercicio 12: Pasar de array a archivo/achivo a array + filtros");
    puts("\n\nIngrese una opcion (primer numero): ");
    scanf("%i", &ejercicio);

    switch(ejercicio)
    {
    case 1:
        addfile(name);
        showfile(name);
        ammount = howmany(name);
        printf("\nAmmount of elements: %i", ammount);
        break;
    case 2:
        loadStudents(namealumnos);
        mostrarAlumnos(namealumnos);
        break;
    case 3:
        puts("\nAgreguemos un alumno mas!");
        addAStudent(namealumnos);
        mostrarAlumnos(namealumnos);
        break;
    case 4:
        insanePila(&pilovich, namealumnos);
        printf("\nLegajo de los alumnos mayores de edad: ");
        mostrar(&pilovich);
        break;
    case 5:
        printf("\nIngrese una edad a buscar: ");
        scanf("%i", &age);
        olderPeople = HowManyOlder(namealumnos, age);
        printf("\nCantidad de personas mayores a %i: %i", age, olderPeople);
        break;
    case 6:
        printf("\nIngrese la edad minima: ");
        scanf("%i", &firstAge);
        printf("\nIngrese la edad maxima: ");
        scanf("%i", &secondAge);
        printf("\nAlumnos entre %i - %i anios:",firstAge, secondAge);
        HowManyOlderRange(namealumnos, firstAge, secondAge);
        break;
    case 7:
        mostrarAlumnos(namealumnos);
        printf("\nAhora, mostraremos el alumno mas grande: ");
        mostrarMayor(namealumnos);
        break;
    case 8:
        printf("\nContaremos los alumnos de un anio determinado! Ingrese el anio: ");
        scanf("%i", &yearSearch);
        yearCount = contarPorAnio(namealumnos, yearSearch);
        printf("Cantidad de alumnos: %i", yearCount);
        break;
    case 9:
        printf("\nGuardaremos en el array los alumnos de un anio en especifico!");
        printf("Ingrese el anio: ");
        scanf("%i", &yearSearch);
        validosArray = fileToArray(namealumnos,arrayAlumnos, yearSearch);
        mostrarAlumnosArray(arrayAlumnos, validosArray);

        break;

    default:
        printf("\nError FATAL........1.1..1.: opcion invalida");
        break;
    }

    return 0;
}

void addfile(char nombre_archivo[])
{
    int yep = 0;
    ///---- opening it
    FILE *archivin;
    archivin = fopen(nombre_archivo, "ab");

    if(archivin != NULL)
    {
        printf("\nIngrese un int: ");
        scanf("%i", &yep);

        fwrite(&yep, sizeof(int), 1, archivin);
        fclose(archivin);

    }
    else
    {
        printf("\nNo se ha encontrado el archivo!");
    }
}

void showfile(char nombre_archivo[])
{
    int yep = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    if(archivin != NULL)
    {
        while(fread(&yep, sizeof(int),1, archivin) > 0)
        {
            printf("\nINT: %i", yep);
        }
        fclose(archivin);
    }
    else
    {
        printf("\nNo se ha encontrado el archivo!");
    }
}

int howmany(char nombre_archivo[])
{
    int count = 0;
    int yep = 0; //idk why

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    if(archivin != NULL)
    {
        printf("\nbeep beep starting count . . . . .");
        while(!feof(archivin))
        {
            fread(&yep, sizeof(int),1, archivin);
            if (!feof(archivin))
            {
                printf("\nCOUNTED!");
                count++;
            }
        }
        fclose(archivin);
    }
    else
    {
        printf("\nNo se ha encontrado el archivo!");
    }
    return count;
}

Alumno cargarAlumno()
{
    Alumno a;

    fflush(stdin);
    printf("\nIngrese el nombre del alumno: ");
    gets(a.nombre);
    printf("\nIngrese la legajo de [ %s ]: ", a.nombre);
    scanf("%i", &a.legajo);
    printf("\nIngrese la edad de [ %s ]: ", a.nombre);
    scanf("%i", &a.edad);
    printf("\nIngrese el anio de [ %s ]: ", a.nombre);
    scanf("%i", &a.anio);

    return a;
}

void loadStudents(char nombre_archivo[])
{
    int count = 5;
    Alumno a;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");
    if(archivin != NULL)
    {
        printf("\nEl archivo ya existe");
        fclose(archivin);

    }
    else
    {
        printf("\nCreando el archivo . . . ");
        archivin = fopen(nombre_archivo, "wb");
        for(int i = 0; i < count; i++)
        {
            a = cargarAlumno();
            fwrite(&a,sizeof(Alumno),1,archivin);
        }
        fclose(archivin);
    }

}

void mostrarAlumno(Alumno a)
{
    printf("\n[ %i ] [ %s ] [ %i ] [ %i ]", a.legajo, a.nombre, a.edad, a.anio);
}

void mostrarAlumnos(char nombre_archivo[])
{
    Alumno a;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    printf("\n===------------------------===");
    printf("\nLEGAJO | NOMBRES | EDAD | ANIO");

    while(fread(&a, sizeof(Alumno), 1, archivin) )
    {
        mostrarAlumno(a);
    }
    fclose(archivin);
    printf("\n===------------------------===");
}

void addAStudent(char nombre_archivo[])
{
    Alumno a;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    if(archivin != NULL)
    {
        archivin = fopen(nombre_archivo, "ab");
        a = cargarAlumno();
        fwrite(&a,sizeof(Alumno),1,archivin);
        fclose(archivin);
    }
    else
    {
        printf("\nEl archivo no existe");
        fclose(archivin);
    }
}

void insanePila(Pila* A, char nombre_archivo[])
{
    Alumno alumnito;
    int integer = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(alumnito.edad >= 18)
        {
            apilar(A, alumnito.legajo);
        }
    }

    fclose(archivin);
}

int HowManyOlder(char nombre_archivo[], int age)
{
    Alumno alumnito;
    int count = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(alumnito.edad > age)
        {
            count++;
        }
    }
    fclose(archivin);

    return count;
}

int HowManyOlderRange(char nombre_archivo[], int age1, int age2)
{
    Alumno alumnito;
    int count = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(alumnito.edad > age1 && alumnito.edad < age2)
        {
            mostrarAlumno(alumnito);
        }
    }
    fclose(archivin);

    return count;
}

void printPorLegajo(char nombre_archivo[], int legajo)
{
    Alumno alumnito;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(legajo == alumnito.legajo)
        {
            mostrarAlumno(alumnito);
        }
    }
    fclose(archivin);
}



void mostrarMayor(char nombre_archivo[])
{
    Alumno alumnito;
    int mayor = 0;
    int maxlegajo = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(alumnito.edad > mayor)
        {
            mayor = alumnito.edad;  //por cualquier cosa
            maxlegajo = alumnito.legajo;
        }
    }
    printPorLegajo(nombre_archivo, maxlegajo);
    fclose(archivin);
}


int contarPorAnio(char nombre_archivo[], int anio)
{
    int count = 0;
    Alumno alumnito;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(anio == alumnito.anio)
        {
            count++;
        }
    }
    fclose(archivin);

    return count;
}

void arrayToFile(char nombre_archivo[], Alumno array1[DIM], int validos)
{
    int i = 0;
    FILE *archivin;
    archivin = fopen(nombre_archivo, "ab");

    if (archivin != NULL)
    {
        while(i < validos)
        {
            fwrite(&array1[i], sizeof(Alumno),1, archivin);
            i++;
        }
    }
    fclose(archivin);
}


void mostrarAlumnosArray(Alumno array1[DIM], int validos)
{
    printf("\n===--------------------===");
    printf("\nMATRICULA | NOMBRES | GENERO");

    for(int i = 0; i < validos; i++)
    {
        mostrarAlumno(array1[i]);
    }
}

int fileToArray(char nombre_archivo[], Alumno array1[DIM], int anio)
{
    Alumno alumnito;
    int i = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    while(i < DIM && fread(&alumnito, sizeof(Alumno), 1, archivin) > 0)
    {
        if(anio == alumnito.anio)
        {
            array1[i] = alumnito;
            i++;
        }
    }
    fclose(archivin);
    return i; //validos
}

int cantRegistros(char nombre_archivo[])
{
    int cant = 0;

    FILE *archivin;
    archivin = fopen(nombre_archivo, "rb");

    if (archivin != NULL)
    {
        fseek(archivin, sizeof(int))




    }
}
